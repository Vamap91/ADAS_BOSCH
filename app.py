import streamlit as st
import pandas as pd
import os
from typing import Dict, List

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema ADAS Pro",
    page_icon="üîß",
    layout="wide"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .vehicle-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #007bff;
        margin: 1rem 0;
    }
    
    .adas-status-positive {
        background: #d4edda;
        color: #155724;
        padding: 0.5rem;
        border-radius: 5px;
        border-left: 4px solid #28a745;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_vehicle_data(uploaded_file=None):
    """Carrega dados de ve√≠culos"""
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
            return df
        except Exception as e:
            st.error(f"Erro ao carregar arquivo: {e}")
    
    # Verificar se existe arquivo local
    if os.path.exists('data/processed_data.csv'):
        try:
            df = pd.read_csv('data/processed_data.csv', sep=';', encoding='utf-8')
            return df
        except Exception as e:
            st.warning(f"Erro ao carregar arquivo local: {e}")
    
    # Dados de demonstra√ß√£o
    return pd.DataFrame({
        'FipeID': [92983, 95432, 87621, 73291, 84512, 91234, 76543, 88901, 92345, 85678],
        'VehicleModelYear': [2024, 2023, 2024, 2025, 2023, 2024, 2023, 2025, 2024, 2023],
        'BrandName': ['BMW', 'VOLKSWAGEN', 'MERCEDES-BENZ', 'AUDI', 'TOYOTA', 
                     'VOLVO', 'FORD', 'HYUNDAI', 'JEEP', 'LAND ROVER'],
        'VehicleName': [
            '118i M Sport 1.5 TB 12V Aut. 5p',
            'Polo TSI 1.0 200 Aut. 5p',
            'A-Class A200 1.3 TB Aut.',
            'A3 Sedan 1.4 TFSI Aut.',
            'Corolla 2.0 XEi Aut.',
            'XC60 T5 Momentum AWD Aut.',
            'Territory 1.5 EcoBoost GTDi Aut.',
            'Tucson 1.6 GLS TB Aut.',
            'Compass 1.3 T270 Turbo Aut.',
            'Discovery Sport HSE 2.0 TD4 Aut.'
        ],
        'Abrevia√ß√£o de descri√ß√£o': [
            '118i M Sport', 'Polo TSI', 'A200', 'A3 Sedan', 'Corolla XEi',
            'XC60 T5', 'Territory EcoBoost', 'Tucson GLS', 'Compass T270', 'Discovery Sport'
        ],
        'ADAS': ['Sim'] * 10,
        'ADAS no Parabrisa': ['Sim', 'Sim', 'Sim', 'Sim', 'N√£o', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim'],
        'Adas no Parachoque': ['Sim'] * 10,
        'Tipo de Regulagem': [
            'Dinamica', 'Estatica', 'Dinamica', 'Estatica/Dinamica', 'Dinamica',
            'Dinamica', 'Estatica', 'Dinamica', 'Estatica', 'Dinamica'
        ],
        'Camera no Retrovisor': ['N√£o', 'Sim', 'Sim', 'N√£o', 'Sim', 'Sim', 'N√£o', 'Sim', 'Sim', 'Sim'],
        'Far√≥is Matrix': ['N√£o', 'N√£o', 'Sim', 'Sim', 'N√£o', 'Sim', 'N√£o', 'N√£o', 'Sim', 'Sim']
    })

def intelligent_search(query: str, df: pd.DataFrame) -> List[Dict]:
    """Sistema de busca inteligente"""
    if not query.strip():
        return []
    
    query_clean = query.strip().upper()
    results = []
    
    # Busca por FIPE ID
    if query_clean.isdigit():
        fipe_matches = df[df['FipeID'].astype(str) == query_clean]
        if not fipe_matches.empty:
            return fipe_matches.to_dict('records')
    
    # Busca textual
    for idx, row in df.iterrows():
        score = 0
        
        # Score por marca
        if query_clean in str(row['BrandName']).upper():
            score += 50
        
        # Score por modelo
        if query_clean in str(row['VehicleName']).upper():
            score += 40
        
        # Score por abrevia√ß√£o
        if query_clean in str(row['Abrevia√ß√£o de descri√ß√£o']).upper():
            score += 30
        
        if score > 0:
            result = row.to_dict()
            result['search_score'] = score
            results.append(result)
    
    return sorted(results, key=lambda x: x.get('search_score', 0), reverse=True)[:10]

def get_calibration_instructions(brand: str, calibration_type: str) -> Dict:
    """Retorna instru√ß√µes de calibra√ß√£o"""
    instructions_db = {
        'BMW': {
            'title': 'üîß Calibra√ß√£o BMW ADAS',
            'duration': '60-90 minutos',
            'steps': [
                'Conectar DAS 3000 ou equipamento compat√≠vel BMW',
                'Verificar c√≥digos de defeito e limpar se necess√°rio',
                'Verificar press√£o dos pneus conforme especifica√ß√£o BMW',
                'Selecionar "BMW" ‚Üí "Sistemas ADAS" no equipamento',
                'Escolher tipo de calibra√ß√£o (Est√°tica/Din√¢mica)',
                'Seguir procedimento guiado no equipamento',
                'Realizar test drive para valida√ß√£o (se din√¢mica)',
                'Verificar funcionamento de todos os sistemas ADAS'
            ],
            'requirements': [
                'Equipamento DAS 3000 ou compat√≠vel BMW',
                'Superf√≠cie plana e nivelada para calibra√ß√£o est√°tica',
                'Pista de teste adequada para calibra√ß√£o din√¢mica',
                'Condi√ß√µes clim√°ticas favor√°veis (sem chuva intensa)',
                'Pneus calibrados conforme especifica√ß√£o',
                'Alinhamento e geometria da dire√ß√£o em dia'
            ],
            'warnings': [
                '‚ö†Ô∏è Verificar recalls de software antes da calibra√ß√£o',
                '‚ö†Ô∏è N√£o realizar calibra√ß√£o com c√≥digos de defeito ativos',
                '‚ö†Ô∏è Temperatura ambiente deve estar entre 5¬∞C e 35¬∞C'
            ]
        },
        'VOLKSWAGEN': {
            'title': 'üîß Calibra√ß√£o Volkswagen ADAS',
            'duration': '30-60 minutos',
            'steps': [
                'Conectar VCDS, ODIS ou equipamento compat√≠vel',
                'Verificar e limpar c√≥digos de defeito',
                'Posicionar ve√≠culo conforme especifica√ß√µes VW',
                'Instalar targets de calibra√ß√£o espec√≠ficos VW/Audi',
                'Acessar Central de Conforto ‚Üí Sistemas ADAS',
                'Executar "Calibra√ß√£o da C√¢mera Frontal"',
                'Aguardar conclus√£o sem mover o ve√≠culo',
                'Verificar funcionamento dos sistemas'
            ],
            'requirements': [
                'VCDS, ODIS ou equipamento compat√≠vel',
                'Targets espec√≠ficos do grupo VW/Audi',
                'Ambiente com ilumina√ß√£o controlada',
                'Bateria com carga m√≠nima de 12,5V',
                'Sistema de dire√ß√£o centralizado'
            ],
            'warnings': [
                '‚ö†Ô∏è Respeitar dist√¢ncias exatas para targets',
                '‚ö†Ô∏è N√£o mover o ve√≠culo durante calibra√ß√£o est√°tica',
                '‚ö†Ô∏è Verificar se para-brisa n√£o possui trincas'
            ]
        }
    }
    
    return instructions_db.get(brand, {
        'title': f'üîß Calibra√ß√£o {brand} ADAS',
        'duration': '45-75 minutos',
        'steps': [
            'Conectar equipamento de diagn√≥stico adequado',
            'Verificar pr√©-requisitos do sistema',
            'Seguir procedimento espec√≠fico do fabricante',
            'Realizar valida√ß√£o conforme manual t√©cnico'
        ],
        'requirements': [
            'Equipamento compat√≠vel com a marca',
            'Manual t√©cnico atualizado',
            'Ambiente adequado para calibra√ß√£o'
        ],
        'warnings': [
            '‚ö†Ô∏è Consultar documenta√ß√£o espec√≠fica',
            '‚ö†Ô∏è Verificar atualiza√ß√µes dispon√≠veis'
        ]
    })

def main():
    """Fun√ß√£o principal"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>üîß Sistema Inteligente de Calibra√ß√£o ADAS</h1>
        <p>Plataforma profissional para calibra√ß√£o de sistemas avan√ßados de assist√™ncia ao condutor</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Upload de arquivo
        uploaded_file = st.file_uploader(
            "üìÅ Carregar Base de Dados",
            type=['csv'],
            help="Envie seu arquivo CSV com dados dos ve√≠culos"
        )
        
        st.markdown("---")
        st.subheader("üìä Estat√≠sticas")
    
    # Carregar dados
    df = load_vehicle_data(uploaded_file)
    
    # Mostrar estat√≠sticas na sidebar
    with st.sidebar:
        total_vehicles = len(df)
        vehicles_with_adas = len(df[df['ADAS'] == 'Sim'])
        unique_brands = df['BrandName'].nunique()
        
        st.metric("Total de Ve√≠culos", f"{total_vehicles:,}")
        st.metric("Ve√≠culos com ADAS", f"{vehicles_with_adas:,}")
        st.metric("Marcas √önicas", unique_brands)
        
        if not uploaded_file:
            st.info("‚ÑπÔ∏è Usando dados de demonstra√ß√£o")
    
    # Interface de busca principal
    st.subheader("üîç Buscar Ve√≠culo")
    
    search_col, button_col = st.columns([4, 1])
    
    with search_col:
        search_query = st.text_input(
            "",
            placeholder="Digite c√≥digo FIPE, marca, modelo ou abrevia√ß√£o (ex: BMW 118i, 92983, Polo TSI)",
            help="Busca inteligente: aceita c√≥digo FIPE, nome da marca, modelo ou abrevia√ß√£o do ve√≠culo"
        )
    
    with button_col:
        search_button = st.button("üîç Buscar", type="primary", use_container_width=True)
    
    # Processamento da busca
    if search_button and search_query:
        with st.spinner("üîÑ Buscando ve√≠culo na base de dados..."):
            results = intelligent_search(search_query, df)
        
        if results:
            st.success(f"‚úÖ Encontrados {len(results)} ve√≠culo(s) para: '{search_query}'")
            
            for i, vehicle in enumerate(results):
                # Card do ve√≠culo
                st.markdown(f"""
                <div class="vehicle-card">
                    <h3>üöó {vehicle['BrandName']} {vehicle['VehicleName']}</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin: 1rem 0;">
                        <div><strong>Ano:</strong> {vehicle['VehicleModelYear']}</div>
                        <div><strong>FIPE ID:</strong> {vehicle['FipeID']}</div>
                        <div><strong>Abrevia√ß√£o:</strong> {vehicle['Abrevia√ß√£o de descri√ß√£o']}</div>
                        <div><strong>Calibra√ß√£o:</strong> {vehicle['Tipo de Regulagem']}</div>
                    </div>
                    
                    <div class="adas-status-positive">
                        <h4>‚úÖ Status ADAS</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem;">
                            <div>‚Ä¢ ADAS no Parabrisa: {'‚úÖ' if vehicle['ADAS no Parabrisa'] == 'Sim' else '‚ùå'}</div>
                            <div>‚Ä¢ ADAS no Parachoque: {'‚úÖ' if vehicle['Adas no Parachoque'] == 'Sim' else '‚ùå'}</div>
                            <div>‚Ä¢ C√¢mera Retrovisor: {'‚úÖ' if vehicle['Camera no Retrovisor'] == 'Sim' else '‚ùå'}</div>
                            <div>‚Ä¢ Far√≥is Matrix: {'‚úÖ' if vehicle['Far√≥is Matrix'] == 'Sim' else '‚ùå'}</div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Instru√ß√µes de calibra√ß√£o
                if vehicle['ADAS'] == 'Sim':
                    instructions = get_calibration_instructions(
                        vehicle['BrandName'], 
                        vehicle['Tipo de Regulagem']
                    )
                    
                    with st.expander(f"‚öôÔ∏è Instru√ß√µes de Calibra√ß√£o - {vehicle['BrandName']}", expanded=True):
                        st.markdown(f"### {instructions['title']}")
                        st.write(f"**‚è±Ô∏è Dura√ß√£o Estimada:** {instructions['duration']}")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.subheader("üìù Procedimento Passo a Passo")
                            for j, step in enumerate(instructions['steps'], 1):
                                st.write(f"{j}. {step}")
                        
                        with col2:
                            st.subheader("üìã Requisitos")
                            for req in instructions['requirements']:
                                st.write(f"‚Ä¢ {req}")
                            
                            if 'warnings' in instructions:
                                st.subheader("‚ö†Ô∏è Avisos Importantes")
                                for warning in instructions['warnings']:
                                    st.warning(warning)
                
                st.markdown("---")
        
        else:
            st.error(f"‚ùå Nenhum ve√≠culo encontrado para: '{search_query}'")
            st.info("üí° **Dicas de busca:**")
            st.write("‚Ä¢ Use o c√≥digo FIPE para busca exata")
            st.write("‚Ä¢ Digite apenas a marca para ver todos os modelos")
            st.write("‚Ä¢ Use abrevia√ß√µes como 'Polo TSI', '118i'")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>üîß <strong>Sistema ADAS Pro</strong> | Desenvolvido para profissionais da √°rea automotiva</p>
        <p>üí° Sugest√µes? Entre em contato: desenvolvimento@adas.com</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
